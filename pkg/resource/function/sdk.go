// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package function

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/lambda"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/lambda-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Function{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetFunctionOutput
	resp, err = rm.sdkapi.GetFunction(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetFunction", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.Configuration.Architectures != nil {
		f0 := []*string{}
		for _, f0iter := range resp.Configuration.Architectures {
			var f0elem *string
			f0elem = aws.String(string(f0iter))
			f0 = append(f0, f0elem)
		}
		ko.Spec.Architectures = f0
	} else {
		ko.Spec.Architectures = nil
	}
	if resp.Configuration.CodeSha256 != nil {
		ko.Status.CodeSHA256 = resp.Configuration.CodeSha256
	} else {
		ko.Status.CodeSHA256 = nil
	}
	ko.Status.CodeSize = &resp.Configuration.CodeSize
	if resp.Configuration.DeadLetterConfig != nil {
		f3 := &svcapitypes.DeadLetterConfig{}
		if resp.Configuration.DeadLetterConfig.TargetArn != nil {
			f3.TargetARN = resp.Configuration.DeadLetterConfig.TargetArn
		}
		ko.Spec.DeadLetterConfig = f3
	} else {
		ko.Spec.DeadLetterConfig = nil
	}
	if resp.Configuration.Description != nil {
		ko.Spec.Description = resp.Configuration.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.Configuration.Environment != nil {
		f5 := &svcapitypes.Environment{}
		if resp.Configuration.Environment.Variables != nil {
			f5.Variables = aws.StringMap(resp.Configuration.Environment.Variables)
		}
		ko.Spec.Environment = f5
	} else {
		ko.Spec.Environment = nil
	}
	if resp.Configuration.EphemeralStorage != nil {
		f6 := &svcapitypes.EphemeralStorage{}
		if resp.Configuration.EphemeralStorage.Size != nil {
			sizeCopy := int64(*resp.Configuration.EphemeralStorage.Size)
			f6.Size = &sizeCopy
		}
		ko.Spec.EphemeralStorage = f6
	} else {
		ko.Spec.EphemeralStorage = nil
	}
	if resp.Configuration.FileSystemConfigs != nil {
		f7 := []*svcapitypes.FileSystemConfig{}
		for _, f7iter := range resp.Configuration.FileSystemConfigs {
			f7elem := &svcapitypes.FileSystemConfig{}
			if f7iter.Arn != nil {
				f7elem.ARN = f7iter.Arn
			}
			if f7iter.LocalMountPath != nil {
				f7elem.LocalMountPath = f7iter.LocalMountPath
			}
			f7 = append(f7, f7elem)
		}
		ko.Spec.FileSystemConfigs = f7
	} else {
		ko.Spec.FileSystemConfigs = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Configuration.FunctionArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Configuration.FunctionArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Configuration.FunctionName != nil {
		ko.Spec.Name = resp.Configuration.FunctionName
	} else {
		ko.Spec.Name = nil
	}
	if resp.Configuration.Handler != nil {
		ko.Spec.Handler = resp.Configuration.Handler
	} else {
		ko.Spec.Handler = nil
	}
	if resp.Configuration.ImageConfigResponse != nil {
		f11 := &svcapitypes.ImageConfigResponse{}
		if resp.Configuration.ImageConfigResponse.Error != nil {
			f11f0 := &svcapitypes.ImageConfigError{}
			if resp.Configuration.ImageConfigResponse.Error.ErrorCode != nil {
				f11f0.ErrorCode = resp.Configuration.ImageConfigResponse.Error.ErrorCode
			}
			if resp.Configuration.ImageConfigResponse.Error.Message != nil {
				f11f0.Message = resp.Configuration.ImageConfigResponse.Error.Message
			}
			f11.Error = f11f0
		}
		if resp.Configuration.ImageConfigResponse.ImageConfig != nil {
			f11f1 := &svcapitypes.ImageConfig{}
			if resp.Configuration.ImageConfigResponse.ImageConfig.Command != nil {
				f11f1.Command = aws.StringSlice(resp.Configuration.ImageConfigResponse.ImageConfig.Command)
			}
			if resp.Configuration.ImageConfigResponse.ImageConfig.EntryPoint != nil {
				f11f1.EntryPoint = aws.StringSlice(resp.Configuration.ImageConfigResponse.ImageConfig.EntryPoint)
			}
			if resp.Configuration.ImageConfigResponse.ImageConfig.WorkingDirectory != nil {
				f11f1.WorkingDirectory = resp.Configuration.ImageConfigResponse.ImageConfig.WorkingDirectory
			}
			f11.ImageConfig = f11f1
		}
		ko.Status.ImageConfigResponse = f11
	} else {
		ko.Status.ImageConfigResponse = nil
	}
	if resp.Configuration.KMSKeyArn != nil {
		ko.Spec.KMSKeyARN = resp.Configuration.KMSKeyArn
	} else {
		ko.Spec.KMSKeyARN = nil
	}
	if resp.Configuration.LastModified != nil {
		ko.Status.LastModified = resp.Configuration.LastModified
	} else {
		ko.Status.LastModified = nil
	}
	if resp.Configuration.LastUpdateStatus != "" {
		ko.Status.LastUpdateStatus = aws.String(string(resp.Configuration.LastUpdateStatus))
	} else {
		ko.Status.LastUpdateStatus = nil
	}
	if resp.Configuration.LastUpdateStatusReason != nil {
		ko.Status.LastUpdateStatusReason = resp.Configuration.LastUpdateStatusReason
	} else {
		ko.Status.LastUpdateStatusReason = nil
	}
	if resp.Configuration.LastUpdateStatusReasonCode != "" {
		ko.Status.LastUpdateStatusReasonCode = aws.String(string(resp.Configuration.LastUpdateStatusReasonCode))
	} else {
		ko.Status.LastUpdateStatusReasonCode = nil
	}
	if resp.Configuration.MasterArn != nil {
		ko.Status.MasterARN = resp.Configuration.MasterArn
	} else {
		ko.Status.MasterARN = nil
	}
	if resp.Configuration.MemorySize != nil {
		memorySizeCopy := int64(*resp.Configuration.MemorySize)
		ko.Spec.MemorySize = &memorySizeCopy
	} else {
		ko.Spec.MemorySize = nil
	}
	if resp.Configuration.PackageType != "" {
		ko.Spec.PackageType = aws.String(string(resp.Configuration.PackageType))
	} else {
		ko.Spec.PackageType = nil
	}
	if resp.Configuration.RevisionId != nil {
		ko.Status.RevisionID = resp.Configuration.RevisionId
	} else {
		ko.Status.RevisionID = nil
	}
	if resp.Configuration.Role != nil {
		ko.Spec.Role = resp.Configuration.Role
	} else {
		ko.Spec.Role = nil
	}
	if resp.Configuration.Runtime != "" {
		ko.Spec.Runtime = aws.String(string(resp.Configuration.Runtime))
	} else {
		ko.Spec.Runtime = nil
	}
	if resp.Configuration.SigningJobArn != nil {
		ko.Status.SigningJobARN = resp.Configuration.SigningJobArn
	} else {
		ko.Status.SigningJobARN = nil
	}
	if resp.Configuration.SigningProfileVersionArn != nil {
		ko.Status.SigningProfileVersionARN = resp.Configuration.SigningProfileVersionArn
	} else {
		ko.Status.SigningProfileVersionARN = nil
	}
	if resp.Configuration.SnapStart != nil {
		f28 := &svcapitypes.SnapStart{}
		if resp.Configuration.SnapStart.ApplyOn != "" {
			f28.ApplyOn = aws.String(string(resp.Configuration.SnapStart.ApplyOn))
		}
		ko.Spec.SnapStart = f28
	} else {
		ko.Spec.SnapStart = nil
	}
	if resp.Configuration.State != "" {
		ko.Status.State = aws.String(string(resp.Configuration.State))
	} else {
		ko.Status.State = nil
	}
	if resp.Configuration.StateReason != nil {
		ko.Status.StateReason = resp.Configuration.StateReason
	} else {
		ko.Status.StateReason = nil
	}
	if resp.Configuration.StateReasonCode != "" {
		ko.Status.StateReasonCode = aws.String(string(resp.Configuration.StateReasonCode))
	} else {
		ko.Status.StateReasonCode = nil
	}
	if resp.Configuration.Timeout != nil {
		timeoutCopy := int64(*resp.Configuration.Timeout)
		ko.Spec.Timeout = &timeoutCopy
	} else {
		ko.Spec.Timeout = nil
	}
	if resp.Configuration.TracingConfig != nil {
		f33 := &svcapitypes.TracingConfig{}
		if resp.Configuration.TracingConfig.Mode != "" {
			f33.Mode = aws.String(string(resp.Configuration.TracingConfig.Mode))
		}
		ko.Spec.TracingConfig = f33
	} else {
		ko.Spec.TracingConfig = nil
	}
	if resp.Configuration.Version != nil {
		ko.Status.Version = resp.Configuration.Version
	} else {
		ko.Status.Version = nil
	}
	if resp.Configuration.VpcConfig != nil {
		f35 := &svcapitypes.VPCConfig{}
		if resp.Configuration.VpcConfig.SecurityGroupIds != nil {
			f35.SecurityGroupIDs = aws.StringSlice(resp.Configuration.VpcConfig.SecurityGroupIds)
		}
		if resp.Configuration.VpcConfig.SubnetIds != nil {
			f35.SubnetIDs = aws.StringSlice(resp.Configuration.VpcConfig.SubnetIds)
		}
		ko.Spec.VPCConfig = f35
	} else {
		ko.Spec.VPCConfig = nil
	}

	rm.setStatusDefaults(ko)
	if resp.Code != nil {
		if ko.Spec.Code == nil {
			ko.Spec.Code = &svcapitypes.FunctionCode{}
		}
		if resp.Code.ImageUri != nil {
			ko.Spec.Code.ImageURI = resp.Code.ImageUri
		}
	}
	if resp.Configuration.Layers != nil {
		f16 := []*svcapitypes.Layer{}
		layer := []*string{}
		for _, f16iter := range resp.Configuration.Layers {
			f16elem := &svcapitypes.Layer{}
			if f16iter.Arn != nil {
				f16elem.ARN = f16iter.Arn
			}
			if f16iter.CodeSize != 0 {
				f16elem.CodeSize = aws.Int64(f16iter.CodeSize)
			}
			if f16iter.SigningJobArn != nil {
				f16elem.SigningJobARN = f16iter.SigningJobArn
			}
			if f16iter.SigningProfileVersionArn != nil {
				f16elem.SigningProfileVersionARN = f16iter.SigningProfileVersionArn
			}
			f16 = append(f16, f16elem)
			layer = append(layer, f16iter.Arn)
		}
		ko.Spec.Layers = layer
		ko.Status.LayerStatuses = f16
	} else {
		ko.Status.LayerStatuses = nil
	}
	if resp.Tags != nil {
		expectedOutput := map[string]*string{}
		for expectedOutputKey, expectedOutputIter := range resp.Tags {
			var expectedOutputVal string
			expectedOutputVal = expectedOutputIter
			expectedOutput[expectedOutputKey] = &expectedOutputVal
		}
		ko.Spec.Tags = expectedOutput
	}
	if err := rm.setResourceAdditionalFields(ctx, ko); err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetFunctionInput, error) {
	res := &svcsdk.GetFunctionInput{}

	if r.ko.Spec.Name != nil {
		res.FunctionName = r.ko.Spec.Name
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	if desired.ko.Spec.CodeSigningConfigARN != nil && *desired.ko.Spec.CodeSigningConfigARN == "" {
		input.CodeSigningConfigArn = nil
	}

	var resp *svcsdk.CreateFunctionOutput
	_ = resp
	resp, err = rm.sdkapi.CreateFunction(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateFunction", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Architectures != nil {
		f0 := []*string{}
		for _, f0iter := range resp.Architectures {
			var f0elem *string
			f0elem = aws.String(string(f0iter))
			f0 = append(f0, f0elem)
		}
		ko.Spec.Architectures = f0
	} else {
		ko.Spec.Architectures = nil
	}
	if resp.CodeSha256 != nil {
		ko.Status.CodeSHA256 = resp.CodeSha256
	} else {
		ko.Status.CodeSHA256 = nil
	}
	ko.Status.CodeSize = &resp.CodeSize
	if resp.DeadLetterConfig != nil {
		f3 := &svcapitypes.DeadLetterConfig{}
		if resp.DeadLetterConfig.TargetArn != nil {
			f3.TargetARN = resp.DeadLetterConfig.TargetArn
		}
		ko.Spec.DeadLetterConfig = f3
	} else {
		ko.Spec.DeadLetterConfig = nil
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.Environment != nil {
		f5 := &svcapitypes.Environment{}
		if resp.Environment.Variables != nil {
			f5.Variables = aws.StringMap(resp.Environment.Variables)
		}
		ko.Spec.Environment = f5
	} else {
		ko.Spec.Environment = nil
	}
	if resp.EphemeralStorage != nil {
		f6 := &svcapitypes.EphemeralStorage{}
		if resp.EphemeralStorage.Size != nil {
			sizeCopy := int64(*resp.EphemeralStorage.Size)
			f6.Size = &sizeCopy
		}
		ko.Spec.EphemeralStorage = f6
	} else {
		ko.Spec.EphemeralStorage = nil
	}
	if resp.FileSystemConfigs != nil {
		f7 := []*svcapitypes.FileSystemConfig{}
		for _, f7iter := range resp.FileSystemConfigs {
			f7elem := &svcapitypes.FileSystemConfig{}
			if f7iter.Arn != nil {
				f7elem.ARN = f7iter.Arn
			}
			if f7iter.LocalMountPath != nil {
				f7elem.LocalMountPath = f7iter.LocalMountPath
			}
			f7 = append(f7, f7elem)
		}
		ko.Spec.FileSystemConfigs = f7
	} else {
		ko.Spec.FileSystemConfigs = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.FunctionArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.FunctionArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.FunctionName != nil {
		ko.Spec.Name = resp.FunctionName
	} else {
		ko.Spec.Name = nil
	}
	if resp.Handler != nil {
		ko.Spec.Handler = resp.Handler
	} else {
		ko.Spec.Handler = nil
	}
	if resp.ImageConfigResponse != nil {
		f11 := &svcapitypes.ImageConfigResponse{}
		if resp.ImageConfigResponse.Error != nil {
			f11f0 := &svcapitypes.ImageConfigError{}
			if resp.ImageConfigResponse.Error.ErrorCode != nil {
				f11f0.ErrorCode = resp.ImageConfigResponse.Error.ErrorCode
			}
			if resp.ImageConfigResponse.Error.Message != nil {
				f11f0.Message = resp.ImageConfigResponse.Error.Message
			}
			f11.Error = f11f0
		}
		if resp.ImageConfigResponse.ImageConfig != nil {
			f11f1 := &svcapitypes.ImageConfig{}
			if resp.ImageConfigResponse.ImageConfig.Command != nil {
				f11f1.Command = aws.StringSlice(resp.ImageConfigResponse.ImageConfig.Command)
			}
			if resp.ImageConfigResponse.ImageConfig.EntryPoint != nil {
				f11f1.EntryPoint = aws.StringSlice(resp.ImageConfigResponse.ImageConfig.EntryPoint)
			}
			if resp.ImageConfigResponse.ImageConfig.WorkingDirectory != nil {
				f11f1.WorkingDirectory = resp.ImageConfigResponse.ImageConfig.WorkingDirectory
			}
			f11.ImageConfig = f11f1
		}
		ko.Status.ImageConfigResponse = f11
	} else {
		ko.Status.ImageConfigResponse = nil
	}
	if resp.KMSKeyArn != nil {
		ko.Spec.KMSKeyARN = resp.KMSKeyArn
	} else {
		ko.Spec.KMSKeyARN = nil
	}
	if resp.LastModified != nil {
		ko.Status.LastModified = resp.LastModified
	} else {
		ko.Status.LastModified = nil
	}
	if resp.LastUpdateStatus != "" {
		ko.Status.LastUpdateStatus = aws.String(string(resp.LastUpdateStatus))
	} else {
		ko.Status.LastUpdateStatus = nil
	}
	if resp.LastUpdateStatusReason != nil {
		ko.Status.LastUpdateStatusReason = resp.LastUpdateStatusReason
	} else {
		ko.Status.LastUpdateStatusReason = nil
	}
	if resp.LastUpdateStatusReasonCode != "" {
		ko.Status.LastUpdateStatusReasonCode = aws.String(string(resp.LastUpdateStatusReasonCode))
	} else {
		ko.Status.LastUpdateStatusReasonCode = nil
	}
	if resp.MasterArn != nil {
		ko.Status.MasterARN = resp.MasterArn
	} else {
		ko.Status.MasterARN = nil
	}
	if resp.MemorySize != nil {
		memorySizeCopy := int64(*resp.MemorySize)
		ko.Spec.MemorySize = &memorySizeCopy
	} else {
		ko.Spec.MemorySize = nil
	}
	if resp.PackageType != "" {
		ko.Spec.PackageType = aws.String(string(resp.PackageType))
	} else {
		ko.Spec.PackageType = nil
	}
	if resp.RevisionId != nil {
		ko.Status.RevisionID = resp.RevisionId
	} else {
		ko.Status.RevisionID = nil
	}
	if resp.Role != nil {
		ko.Spec.Role = resp.Role
	} else {
		ko.Spec.Role = nil
	}
	if resp.Runtime != "" {
		ko.Spec.Runtime = aws.String(string(resp.Runtime))
	} else {
		ko.Spec.Runtime = nil
	}
	if resp.SigningJobArn != nil {
		ko.Status.SigningJobARN = resp.SigningJobArn
	} else {
		ko.Status.SigningJobARN = nil
	}
	if resp.SigningProfileVersionArn != nil {
		ko.Status.SigningProfileVersionARN = resp.SigningProfileVersionArn
	} else {
		ko.Status.SigningProfileVersionARN = nil
	}
	if resp.SnapStart != nil {
		f26 := &svcapitypes.SnapStart{}
		if resp.SnapStart.ApplyOn != "" {
			f26.ApplyOn = aws.String(string(resp.SnapStart.ApplyOn))
		}
		ko.Spec.SnapStart = f26
	} else {
		ko.Spec.SnapStart = nil
	}
	if resp.State != "" {
		ko.Status.State = aws.String(string(resp.State))
	} else {
		ko.Status.State = nil
	}
	if resp.StateReason != nil {
		ko.Status.StateReason = resp.StateReason
	} else {
		ko.Status.StateReason = nil
	}
	if resp.StateReasonCode != "" {
		ko.Status.StateReasonCode = aws.String(string(resp.StateReasonCode))
	} else {
		ko.Status.StateReasonCode = nil
	}
	if resp.Timeout != nil {
		timeoutCopy := int64(*resp.Timeout)
		ko.Spec.Timeout = &timeoutCopy
	} else {
		ko.Spec.Timeout = nil
	}
	if resp.TracingConfig != nil {
		f31 := &svcapitypes.TracingConfig{}
		if resp.TracingConfig.Mode != "" {
			f31.Mode = aws.String(string(resp.TracingConfig.Mode))
		}
		ko.Spec.TracingConfig = f31
	} else {
		ko.Spec.TracingConfig = nil
	}
	if resp.Version != nil {
		ko.Status.Version = resp.Version
	} else {
		ko.Status.Version = nil
	}
	if resp.VpcConfig != nil {
		f33 := &svcapitypes.VPCConfig{}
		if resp.VpcConfig.SecurityGroupIds != nil {
			f33.SecurityGroupIDs = aws.StringSlice(resp.VpcConfig.SecurityGroupIds)
		}
		if resp.VpcConfig.SubnetIds != nil {
			f33.SubnetIDs = aws.StringSlice(resp.VpcConfig.SubnetIds)
		}
		ko.Spec.VPCConfig = f33
	} else {
		ko.Spec.VPCConfig = nil
	}

	rm.setStatusDefaults(ko)
	if resp.Layers != nil {
		f16 := []*svcapitypes.Layer{}
		for _, f16iter := range resp.Layers {
			f16elem := &svcapitypes.Layer{}
			if f16iter.Arn != nil {
				f16elem.ARN = f16iter.Arn
			}
			if f16iter.CodeSize != 0 {
				f16elem.CodeSize = aws.Int64(f16iter.CodeSize)
			}
			if f16iter.SigningJobArn != nil {
				f16elem.SigningJobARN = f16iter.SigningJobArn
			}
			if f16iter.SigningProfileVersionArn != nil {
				f16elem.SigningProfileVersionARN = f16iter.SigningProfileVersionArn
			}
			f16 = append(f16, f16elem)
		}
		ko.Status.LayerStatuses = f16
	} else {
		ko.Status.LayerStatuses = nil
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateFunctionInput, error) {
	res := &svcsdk.CreateFunctionInput{}

	if r.ko.Spec.Architectures != nil {
		f0 := []svcsdktypes.Architecture{}
		for _, f0iter := range r.ko.Spec.Architectures {
			var f0elem string
			f0elem = string(*f0iter)
			f0 = append(f0, svcsdktypes.Architecture(f0elem))
		}
		res.Architectures = f0
	}
	if r.ko.Spec.Code != nil {
		f1 := &svcsdktypes.FunctionCode{}
		if r.ko.Spec.Code.ImageURI != nil {
			f1.ImageUri = r.ko.Spec.Code.ImageURI
		}
		if r.ko.Spec.Code.S3Bucket != nil {
			f1.S3Bucket = r.ko.Spec.Code.S3Bucket
		}
		if r.ko.Spec.Code.S3Key != nil {
			f1.S3Key = r.ko.Spec.Code.S3Key
		}
		if r.ko.Spec.Code.S3ObjectVersion != nil {
			f1.S3ObjectVersion = r.ko.Spec.Code.S3ObjectVersion
		}
		if r.ko.Spec.Code.ZipFile != nil {
			f1.ZipFile = r.ko.Spec.Code.ZipFile
		}
		res.Code = f1
	}
	if r.ko.Spec.CodeSigningConfigARN != nil {
		res.CodeSigningConfigArn = r.ko.Spec.CodeSigningConfigARN
	}
	if r.ko.Spec.DeadLetterConfig != nil {
		f3 := &svcsdktypes.DeadLetterConfig{}
		if r.ko.Spec.DeadLetterConfig.TargetARN != nil {
			f3.TargetArn = r.ko.Spec.DeadLetterConfig.TargetARN
		}
		res.DeadLetterConfig = f3
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.Environment != nil {
		f5 := &svcsdktypes.Environment{}
		if r.ko.Spec.Environment.Variables != nil {
			f5.Variables = aws.ToStringMap(r.ko.Spec.Environment.Variables)
		}
		res.Environment = f5
	}
	if r.ko.Spec.EphemeralStorage != nil {
		f6 := &svcsdktypes.EphemeralStorage{}
		if r.ko.Spec.EphemeralStorage.Size != nil {
			sizeCopy0 := *r.ko.Spec.EphemeralStorage.Size
			if sizeCopy0 > math.MaxInt32 || sizeCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field Size is of type int32")
			}
			sizeCopy := int32(sizeCopy0)
			f6.Size = &sizeCopy
		}
		res.EphemeralStorage = f6
	}
	if r.ko.Spec.FileSystemConfigs != nil {
		f7 := []svcsdktypes.FileSystemConfig{}
		for _, f7iter := range r.ko.Spec.FileSystemConfigs {
			f7elem := &svcsdktypes.FileSystemConfig{}
			if f7iter.ARN != nil {
				f7elem.Arn = f7iter.ARN
			}
			if f7iter.LocalMountPath != nil {
				f7elem.LocalMountPath = f7iter.LocalMountPath
			}
			f7 = append(f7, *f7elem)
		}
		res.FileSystemConfigs = f7
	}
	if r.ko.Spec.Name != nil {
		res.FunctionName = r.ko.Spec.Name
	}
	if r.ko.Spec.Handler != nil {
		res.Handler = r.ko.Spec.Handler
	}
	if r.ko.Spec.ImageConfig != nil {
		f10 := &svcsdktypes.ImageConfig{}
		if r.ko.Spec.ImageConfig.Command != nil {
			f10.Command = aws.ToStringSlice(r.ko.Spec.ImageConfig.Command)
		}
		if r.ko.Spec.ImageConfig.EntryPoint != nil {
			f10.EntryPoint = aws.ToStringSlice(r.ko.Spec.ImageConfig.EntryPoint)
		}
		if r.ko.Spec.ImageConfig.WorkingDirectory != nil {
			f10.WorkingDirectory = r.ko.Spec.ImageConfig.WorkingDirectory
		}
		res.ImageConfig = f10
	}
	if r.ko.Spec.KMSKeyARN != nil {
		res.KMSKeyArn = r.ko.Spec.KMSKeyARN
	}
	if r.ko.Spec.Layers != nil {
		res.Layers = aws.ToStringSlice(r.ko.Spec.Layers)
	}
	if r.ko.Spec.MemorySize != nil {
		memorySizeCopy0 := *r.ko.Spec.MemorySize
		if memorySizeCopy0 > math.MaxInt32 || memorySizeCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field MemorySize is of type int32")
		}
		memorySizeCopy := int32(memorySizeCopy0)
		res.MemorySize = &memorySizeCopy
	}
	if r.ko.Spec.PackageType != nil {
		res.PackageType = svcsdktypes.PackageType(*r.ko.Spec.PackageType)
	}
	if r.ko.Spec.Publish != nil {
		res.Publish = *r.ko.Spec.Publish
	}
	if r.ko.Spec.Role != nil {
		res.Role = r.ko.Spec.Role
	}
	if r.ko.Spec.Runtime != nil {
		res.Runtime = svcsdktypes.Runtime(*r.ko.Spec.Runtime)
	}
	if r.ko.Spec.SnapStart != nil {
		f18 := &svcsdktypes.SnapStart{}
		if r.ko.Spec.SnapStart.ApplyOn != nil {
			f18.ApplyOn = svcsdktypes.SnapStartApplyOn(*r.ko.Spec.SnapStart.ApplyOn)
		}
		res.SnapStart = f18
	}
	if r.ko.Spec.Tags != nil {
		res.Tags = aws.ToStringMap(r.ko.Spec.Tags)
	}
	if r.ko.Spec.Timeout != nil {
		timeoutCopy0 := *r.ko.Spec.Timeout
		if timeoutCopy0 > math.MaxInt32 || timeoutCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field Timeout is of type int32")
		}
		timeoutCopy := int32(timeoutCopy0)
		res.Timeout = &timeoutCopy
	}
	if r.ko.Spec.TracingConfig != nil {
		f21 := &svcsdktypes.TracingConfig{}
		if r.ko.Spec.TracingConfig.Mode != nil {
			f21.Mode = svcsdktypes.TracingMode(*r.ko.Spec.TracingConfig.Mode)
		}
		res.TracingConfig = f21
	}
	if r.ko.Spec.VPCConfig != nil {
		f22 := &svcsdktypes.VpcConfig{}
		if r.ko.Spec.VPCConfig.SecurityGroupIDs != nil {
			f22.SecurityGroupIds = aws.ToStringSlice(r.ko.Spec.VPCConfig.SecurityGroupIDs)
		}
		if r.ko.Spec.VPCConfig.SubnetIDs != nil {
			f22.SubnetIds = aws.ToStringSlice(r.ko.Spec.VPCConfig.SubnetIDs)
		}
		res.VpcConfig = f22
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdateFunction(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteFunctionOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteFunction(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteFunction", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteFunctionInput, error) {
	res := &svcsdk.DeleteFunctionInput{}

	if r.ko.Spec.Name != nil {
		res.FunctionName = r.ko.Spec.Name
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Function,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
