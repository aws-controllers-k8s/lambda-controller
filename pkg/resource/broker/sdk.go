// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package broker

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/mq"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/mq/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/mq-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Broker{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeBrokerOutput
	resp, err = rm.sdkapi.DescribeBroker(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeBroker", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "NotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AuthenticationStrategy != "" {
		ko.Spec.AuthenticationStrategy = aws.String(string(resp.AuthenticationStrategy))
	} else {
		ko.Spec.AuthenticationStrategy = nil
	}
	if resp.AutoMinorVersionUpgrade != nil {
		ko.Spec.AutoMinorVersionUpgrade = resp.AutoMinorVersionUpgrade
	} else {
		ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.BrokerArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.BrokerArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.BrokerId != nil {
		ko.Status.BrokerID = resp.BrokerId
	} else {
		ko.Status.BrokerID = nil
	}
	if resp.BrokerInstances != nil {
		f5 := []*svcapitypes.BrokerInstance{}
		for _, f5iter := range resp.BrokerInstances {
			f5elem := &svcapitypes.BrokerInstance{}
			if f5iter.ConsoleURL != nil {
				f5elem.ConsoleURL = f5iter.ConsoleURL
			}
			if f5iter.Endpoints != nil {
				f5elem.Endpoints = aws.StringSlice(f5iter.Endpoints)
			}
			if f5iter.IpAddress != nil {
				f5elem.IPAddress = f5iter.IpAddress
			}
			f5 = append(f5, f5elem)
		}
		ko.Status.BrokerInstances = f5
	} else {
		ko.Status.BrokerInstances = nil
	}
	if resp.BrokerState != "" {
		ko.Status.BrokerState = aws.String(string(resp.BrokerState))
	} else {
		ko.Status.BrokerState = nil
	}
	if resp.DeploymentMode != "" {
		ko.Spec.DeploymentMode = aws.String(string(resp.DeploymentMode))
	} else {
		ko.Spec.DeploymentMode = nil
	}
	if resp.EncryptionOptions != nil {
		f13 := &svcapitypes.EncryptionOptions{}
		if resp.EncryptionOptions.KmsKeyId != nil {
			f13.KMSKeyID = resp.EncryptionOptions.KmsKeyId
		}
		if resp.EncryptionOptions.UseAwsOwnedKey != nil {
			f13.UseAWSOwnedKey = resp.EncryptionOptions.UseAwsOwnedKey
		}
		ko.Spec.EncryptionOptions = f13
	} else {
		ko.Spec.EncryptionOptions = nil
	}
	if resp.EngineType != "" {
		ko.Spec.EngineType = aws.String(string(resp.EngineType))
	} else {
		ko.Spec.EngineType = nil
	}
	if resp.EngineVersion != nil {
		ko.Spec.EngineVersion = resp.EngineVersion
	} else {
		ko.Spec.EngineVersion = nil
	}
	if resp.HostInstanceType != nil {
		ko.Spec.HostInstanceType = resp.HostInstanceType
	} else {
		ko.Spec.HostInstanceType = nil
	}
	if resp.LdapServerMetadata != nil {
		f17 := &svcapitypes.LDAPServerMetadataInput{}
		if resp.LdapServerMetadata.Hosts != nil {
			f17.Hosts = aws.StringSlice(resp.LdapServerMetadata.Hosts)
		}
		if resp.LdapServerMetadata.RoleBase != nil {
			f17.RoleBase = resp.LdapServerMetadata.RoleBase
		}
		if resp.LdapServerMetadata.RoleName != nil {
			f17.RoleName = resp.LdapServerMetadata.RoleName
		}
		if resp.LdapServerMetadata.RoleSearchMatching != nil {
			f17.RoleSearchMatching = resp.LdapServerMetadata.RoleSearchMatching
		}
		if resp.LdapServerMetadata.RoleSearchSubtree != nil {
			f17.RoleSearchSubtree = resp.LdapServerMetadata.RoleSearchSubtree
		}
		if resp.LdapServerMetadata.ServiceAccountUsername != nil {
			f17.ServiceAccountUsername = resp.LdapServerMetadata.ServiceAccountUsername
		}
		if resp.LdapServerMetadata.UserBase != nil {
			f17.UserBase = resp.LdapServerMetadata.UserBase
		}
		if resp.LdapServerMetadata.UserRoleName != nil {
			f17.UserRoleName = resp.LdapServerMetadata.UserRoleName
		}
		if resp.LdapServerMetadata.UserSearchMatching != nil {
			f17.UserSearchMatching = resp.LdapServerMetadata.UserSearchMatching
		}
		if resp.LdapServerMetadata.UserSearchSubtree != nil {
			f17.UserSearchSubtree = resp.LdapServerMetadata.UserSearchSubtree
		}
		ko.Spec.LDAPServerMetadata = f17
	} else {
		ko.Spec.LDAPServerMetadata = nil
	}
	if resp.Logs != nil {
		f18 := &svcapitypes.Logs{}
		if resp.Logs.Audit != nil {
			f18.Audit = resp.Logs.Audit
		}
		if resp.Logs.General != nil {
			f18.General = resp.Logs.General
		}
		ko.Spec.Logs = f18
	} else {
		ko.Spec.Logs = nil
	}
	if resp.MaintenanceWindowStartTime != nil {
		f19 := &svcapitypes.WeeklyStartTime{}
		if resp.MaintenanceWindowStartTime.DayOfWeek != "" {
			f19.DayOfWeek = aws.String(string(resp.MaintenanceWindowStartTime.DayOfWeek))
		}
		if resp.MaintenanceWindowStartTime.TimeOfDay != nil {
			f19.TimeOfDay = resp.MaintenanceWindowStartTime.TimeOfDay
		}
		if resp.MaintenanceWindowStartTime.TimeZone != nil {
			f19.TimeZone = resp.MaintenanceWindowStartTime.TimeZone
		}
		ko.Spec.MaintenanceWindowStartTime = f19
	} else {
		ko.Spec.MaintenanceWindowStartTime = nil
	}
	if resp.PubliclyAccessible != nil {
		ko.Spec.PubliclyAccessible = resp.PubliclyAccessible
	} else {
		ko.Spec.PubliclyAccessible = nil
	}
	if resp.SecurityGroups != nil {
		ko.Spec.SecurityGroups = aws.StringSlice(resp.SecurityGroups)
	} else {
		ko.Spec.SecurityGroups = nil
	}
	if resp.StorageType != "" {
		ko.Spec.StorageType = aws.String(string(resp.StorageType))
	} else {
		ko.Spec.StorageType = nil
	}
	if resp.SubnetIds != nil {
		ko.Spec.SubnetIDs = aws.StringSlice(resp.SubnetIds)
	} else {
		ko.Spec.SubnetIDs = nil
	}
	if resp.Tags != nil {
		ko.Spec.Tags = aws.StringMap(resp.Tags)
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Users != nil {
		f32 := []*svcapitypes.User{}
		for _, f32iter := range resp.Users {
			f32elem := &svcapitypes.User{}
			if f32iter.Username != nil {
				f32elem.Username = f32iter.Username
			}
			f32 = append(f32, f32elem)
		}
		ko.Spec.Users = f32
	} else {
		ko.Spec.Users = nil
	}

	rm.setStatusDefaults(ko)
	if brokerCreateInProgress(&resource{ko}) {
		return &resource{ko}, requeueWaitWhileCreating
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.BrokerID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeBrokerInput, error) {
	res := &svcsdk.DescribeBrokerInput{}

	if r.ko.Status.BrokerID != nil {
		res.BrokerId = r.ko.Status.BrokerID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateBrokerOutput
	_ = resp
	resp, err = rm.sdkapi.CreateBroker(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateBroker", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.BrokerArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.BrokerArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.BrokerId != nil {
		ko.Status.BrokerID = resp.BrokerId
	} else {
		ko.Status.BrokerID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateBrokerInput, error) {
	res := &svcsdk.CreateBrokerInput{}

	if r.ko.Spec.AuthenticationStrategy != nil {
		res.AuthenticationStrategy = svcsdktypes.AuthenticationStrategy(*r.ko.Spec.AuthenticationStrategy)
	}
	if r.ko.Spec.AutoMinorVersionUpgrade != nil {
		res.AutoMinorVersionUpgrade = r.ko.Spec.AutoMinorVersionUpgrade
	}
	if r.ko.Spec.Name != nil {
		res.BrokerName = r.ko.Spec.Name
	}
	if r.ko.Spec.Configuration != nil {
		f3 := &svcsdktypes.ConfigurationId{}
		if r.ko.Spec.Configuration.ID != nil {
			f3.Id = r.ko.Spec.Configuration.ID
		}
		if r.ko.Spec.Configuration.Revision != nil {
			revisionCopy0 := *r.ko.Spec.Configuration.Revision
			if revisionCopy0 > math.MaxInt32 || revisionCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field Revision is of type int32")
			}
			revisionCopy := int32(revisionCopy0)
			f3.Revision = &revisionCopy
		}
		res.Configuration = f3
	}
	if r.ko.Spec.CreatorRequestID != nil {
		res.CreatorRequestId = r.ko.Spec.CreatorRequestID
	}
	if r.ko.Spec.DeploymentMode != nil {
		res.DeploymentMode = svcsdktypes.DeploymentMode(*r.ko.Spec.DeploymentMode)
	}
	if r.ko.Spec.EncryptionOptions != nil {
		f6 := &svcsdktypes.EncryptionOptions{}
		if r.ko.Spec.EncryptionOptions.KMSKeyID != nil {
			f6.KmsKeyId = r.ko.Spec.EncryptionOptions.KMSKeyID
		}
		if r.ko.Spec.EncryptionOptions.UseAWSOwnedKey != nil {
			f6.UseAwsOwnedKey = r.ko.Spec.EncryptionOptions.UseAWSOwnedKey
		}
		res.EncryptionOptions = f6
	}
	if r.ko.Spec.EngineType != nil {
		res.EngineType = svcsdktypes.EngineType(*r.ko.Spec.EngineType)
	}
	if r.ko.Spec.EngineVersion != nil {
		res.EngineVersion = r.ko.Spec.EngineVersion
	}
	if r.ko.Spec.HostInstanceType != nil {
		res.HostInstanceType = r.ko.Spec.HostInstanceType
	}
	if r.ko.Spec.LDAPServerMetadata != nil {
		f10 := &svcsdktypes.LdapServerMetadataInput{}
		if r.ko.Spec.LDAPServerMetadata.Hosts != nil {
			f10.Hosts = aws.ToStringSlice(r.ko.Spec.LDAPServerMetadata.Hosts)
		}
		if r.ko.Spec.LDAPServerMetadata.RoleBase != nil {
			f10.RoleBase = r.ko.Spec.LDAPServerMetadata.RoleBase
		}
		if r.ko.Spec.LDAPServerMetadata.RoleName != nil {
			f10.RoleName = r.ko.Spec.LDAPServerMetadata.RoleName
		}
		if r.ko.Spec.LDAPServerMetadata.RoleSearchMatching != nil {
			f10.RoleSearchMatching = r.ko.Spec.LDAPServerMetadata.RoleSearchMatching
		}
		if r.ko.Spec.LDAPServerMetadata.RoleSearchSubtree != nil {
			f10.RoleSearchSubtree = r.ko.Spec.LDAPServerMetadata.RoleSearchSubtree
		}
		if r.ko.Spec.LDAPServerMetadata.ServiceAccountPassword != nil {
			f10.ServiceAccountPassword = r.ko.Spec.LDAPServerMetadata.ServiceAccountPassword
		}
		if r.ko.Spec.LDAPServerMetadata.ServiceAccountUsername != nil {
			f10.ServiceAccountUsername = r.ko.Spec.LDAPServerMetadata.ServiceAccountUsername
		}
		if r.ko.Spec.LDAPServerMetadata.UserBase != nil {
			f10.UserBase = r.ko.Spec.LDAPServerMetadata.UserBase
		}
		if r.ko.Spec.LDAPServerMetadata.UserRoleName != nil {
			f10.UserRoleName = r.ko.Spec.LDAPServerMetadata.UserRoleName
		}
		if r.ko.Spec.LDAPServerMetadata.UserSearchMatching != nil {
			f10.UserSearchMatching = r.ko.Spec.LDAPServerMetadata.UserSearchMatching
		}
		if r.ko.Spec.LDAPServerMetadata.UserSearchSubtree != nil {
			f10.UserSearchSubtree = r.ko.Spec.LDAPServerMetadata.UserSearchSubtree
		}
		res.LdapServerMetadata = f10
	}
	if r.ko.Spec.Logs != nil {
		f11 := &svcsdktypes.Logs{}
		if r.ko.Spec.Logs.Audit != nil {
			f11.Audit = r.ko.Spec.Logs.Audit
		}
		if r.ko.Spec.Logs.General != nil {
			f11.General = r.ko.Spec.Logs.General
		}
		res.Logs = f11
	}
	if r.ko.Spec.MaintenanceWindowStartTime != nil {
		f12 := &svcsdktypes.WeeklyStartTime{}
		if r.ko.Spec.MaintenanceWindowStartTime.DayOfWeek != nil {
			f12.DayOfWeek = svcsdktypes.DayOfWeek(*r.ko.Spec.MaintenanceWindowStartTime.DayOfWeek)
		}
		if r.ko.Spec.MaintenanceWindowStartTime.TimeOfDay != nil {
			f12.TimeOfDay = r.ko.Spec.MaintenanceWindowStartTime.TimeOfDay
		}
		if r.ko.Spec.MaintenanceWindowStartTime.TimeZone != nil {
			f12.TimeZone = r.ko.Spec.MaintenanceWindowStartTime.TimeZone
		}
		res.MaintenanceWindowStartTime = f12
	}
	if r.ko.Spec.PubliclyAccessible != nil {
		res.PubliclyAccessible = r.ko.Spec.PubliclyAccessible
	}
	if r.ko.Spec.SecurityGroups != nil {
		res.SecurityGroups = aws.ToStringSlice(r.ko.Spec.SecurityGroups)
	}
	if r.ko.Spec.StorageType != nil {
		res.StorageType = svcsdktypes.BrokerStorageType(*r.ko.Spec.StorageType)
	}
	if r.ko.Spec.SubnetIDs != nil {
		res.SubnetIds = aws.ToStringSlice(r.ko.Spec.SubnetIDs)
	}
	if r.ko.Spec.Tags != nil {
		res.Tags = aws.ToStringMap(r.ko.Spec.Tags)
	}
	if r.ko.Spec.Users != nil {
		f18 := []svcsdktypes.User{}
		for _, f18iter := range r.ko.Spec.Users {
			f18elem := &svcsdktypes.User{}
			if f18iter.ConsoleAccess != nil {
				f18elem.ConsoleAccess = f18iter.ConsoleAccess
			}
			if f18iter.Groups != nil {
				f18elem.Groups = aws.ToStringSlice(f18iter.Groups)
			}
			if f18iter.Password != nil {
				tmpSecret, err := rm.rr.SecretValueFromReference(ctx, f18iter.Password)
				if err != nil {
					return nil, ackrequeue.Needed(err)
				}
				if tmpSecret != "" {
					f18elem.Password = aws.String(tmpSecret)
				}
			}
			if f18iter.ReplicationUser != nil {
				f18elem.ReplicationUser = f18iter.ReplicationUser
			}
			if f18iter.Username != nil {
				f18elem.Username = f18iter.Username
			}
			f18 = append(f18, *f18elem)
		}
		res.Users = f18
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if brokerCreateFailed(latest) {
		msg := "Broker state is CREATION_FAILED"
		setTerminalCondition(desired, corev1.ConditionTrue, &msg, nil)
		setSyncedCondition(desired, corev1.ConditionTrue, nil, nil)
		return desired, nil
	}
	if brokerCreateInProgress(latest) {
		msg := "Broker state is CREATION_IN_PROGRESS"
		setSyncedCondition(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitWhileCreating
	}
	if brokerDeleteInProgress(latest) {
		msg := "Broker state is DELETION_IN_PROGRESS"
		setSyncedCondition(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitWhileDeleting
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateBrokerOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateBroker(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateBroker", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()
	// Copy status from latest observed state
	latestKOStatus := latest.ko.DeepCopy().Status
	ko.Status = latestKOStatus

	if resp.AuthenticationStrategy != "" {
		ko.Spec.AuthenticationStrategy = aws.String(string(resp.AuthenticationStrategy))
	} else {
		ko.Spec.AuthenticationStrategy = nil
	}
	if resp.AutoMinorVersionUpgrade != nil {
		ko.Spec.AutoMinorVersionUpgrade = resp.AutoMinorVersionUpgrade
	} else {
		ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if resp.BrokerId != nil {
		ko.Status.BrokerID = resp.BrokerId
	} else {
		ko.Status.BrokerID = nil
	}
	if resp.Configuration != nil {
		f3 := &svcapitypes.ConfigurationID{}
		if resp.Configuration.Id != nil {
			f3.ID = resp.Configuration.Id
		}
		if resp.Configuration.Revision != nil {
			revisionCopy := int64(*resp.Configuration.Revision)
			f3.Revision = &revisionCopy
		}
		ko.Spec.Configuration = f3
	} else {
		ko.Spec.Configuration = nil
	}
	if resp.EngineVersion != nil {
		ko.Spec.EngineVersion = resp.EngineVersion
	} else {
		ko.Spec.EngineVersion = nil
	}
	if resp.HostInstanceType != nil {
		ko.Spec.HostInstanceType = resp.HostInstanceType
	} else {
		ko.Spec.HostInstanceType = nil
	}
	if resp.LdapServerMetadata != nil {
		f8 := &svcapitypes.LDAPServerMetadataInput{}
		if resp.LdapServerMetadata.Hosts != nil {
			f8.Hosts = aws.StringSlice(resp.LdapServerMetadata.Hosts)
		}
		if resp.LdapServerMetadata.RoleBase != nil {
			f8.RoleBase = resp.LdapServerMetadata.RoleBase
		}
		if resp.LdapServerMetadata.RoleName != nil {
			f8.RoleName = resp.LdapServerMetadata.RoleName
		}
		if resp.LdapServerMetadata.RoleSearchMatching != nil {
			f8.RoleSearchMatching = resp.LdapServerMetadata.RoleSearchMatching
		}
		if resp.LdapServerMetadata.RoleSearchSubtree != nil {
			f8.RoleSearchSubtree = resp.LdapServerMetadata.RoleSearchSubtree
		}
		if resp.LdapServerMetadata.ServiceAccountUsername != nil {
			f8.ServiceAccountUsername = resp.LdapServerMetadata.ServiceAccountUsername
		}
		if resp.LdapServerMetadata.UserBase != nil {
			f8.UserBase = resp.LdapServerMetadata.UserBase
		}
		if resp.LdapServerMetadata.UserRoleName != nil {
			f8.UserRoleName = resp.LdapServerMetadata.UserRoleName
		}
		if resp.LdapServerMetadata.UserSearchMatching != nil {
			f8.UserSearchMatching = resp.LdapServerMetadata.UserSearchMatching
		}
		if resp.LdapServerMetadata.UserSearchSubtree != nil {
			f8.UserSearchSubtree = resp.LdapServerMetadata.UserSearchSubtree
		}
		ko.Spec.LDAPServerMetadata = f8
	} else {
		ko.Spec.LDAPServerMetadata = nil
	}
	if resp.Logs != nil {
		f9 := &svcapitypes.Logs{}
		if resp.Logs.Audit != nil {
			f9.Audit = resp.Logs.Audit
		}
		if resp.Logs.General != nil {
			f9.General = resp.Logs.General
		}
		ko.Spec.Logs = f9
	} else {
		ko.Spec.Logs = nil
	}
	if resp.MaintenanceWindowStartTime != nil {
		f10 := &svcapitypes.WeeklyStartTime{}
		if resp.MaintenanceWindowStartTime.DayOfWeek != "" {
			f10.DayOfWeek = aws.String(string(resp.MaintenanceWindowStartTime.DayOfWeek))
		}
		if resp.MaintenanceWindowStartTime.TimeOfDay != nil {
			f10.TimeOfDay = resp.MaintenanceWindowStartTime.TimeOfDay
		}
		if resp.MaintenanceWindowStartTime.TimeZone != nil {
			f10.TimeZone = resp.MaintenanceWindowStartTime.TimeZone
		}
		ko.Spec.MaintenanceWindowStartTime = f10
	} else {
		ko.Spec.MaintenanceWindowStartTime = nil
	}
	if resp.SecurityGroups != nil {
		ko.Spec.SecurityGroups = aws.StringSlice(resp.SecurityGroups)
	} else {
		ko.Spec.SecurityGroups = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateBrokerInput, error) {
	res := &svcsdk.UpdateBrokerInput{}

	if r.ko.Spec.AuthenticationStrategy != nil {
		res.AuthenticationStrategy = svcsdktypes.AuthenticationStrategy(*r.ko.Spec.AuthenticationStrategy)
	}
	if r.ko.Spec.AutoMinorVersionUpgrade != nil {
		res.AutoMinorVersionUpgrade = r.ko.Spec.AutoMinorVersionUpgrade
	}
	if r.ko.Status.BrokerID != nil {
		res.BrokerId = r.ko.Status.BrokerID
	}
	if r.ko.Spec.Configuration != nil {
		f3 := &svcsdktypes.ConfigurationId{}
		if r.ko.Spec.Configuration.ID != nil {
			f3.Id = r.ko.Spec.Configuration.ID
		}
		if r.ko.Spec.Configuration.Revision != nil {
			revisionCopy0 := *r.ko.Spec.Configuration.Revision
			if revisionCopy0 > math.MaxInt32 || revisionCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field Revision is of type int32")
			}
			revisionCopy := int32(revisionCopy0)
			f3.Revision = &revisionCopy
		}
		res.Configuration = f3
	}
	if r.ko.Spec.EngineVersion != nil {
		res.EngineVersion = r.ko.Spec.EngineVersion
	}
	if r.ko.Spec.HostInstanceType != nil {
		res.HostInstanceType = r.ko.Spec.HostInstanceType
	}
	if r.ko.Spec.LDAPServerMetadata != nil {
		f7 := &svcsdktypes.LdapServerMetadataInput{}
		if r.ko.Spec.LDAPServerMetadata.Hosts != nil {
			f7.Hosts = aws.ToStringSlice(r.ko.Spec.LDAPServerMetadata.Hosts)
		}
		if r.ko.Spec.LDAPServerMetadata.RoleBase != nil {
			f7.RoleBase = r.ko.Spec.LDAPServerMetadata.RoleBase
		}
		if r.ko.Spec.LDAPServerMetadata.RoleName != nil {
			f7.RoleName = r.ko.Spec.LDAPServerMetadata.RoleName
		}
		if r.ko.Spec.LDAPServerMetadata.RoleSearchMatching != nil {
			f7.RoleSearchMatching = r.ko.Spec.LDAPServerMetadata.RoleSearchMatching
		}
		if r.ko.Spec.LDAPServerMetadata.RoleSearchSubtree != nil {
			f7.RoleSearchSubtree = r.ko.Spec.LDAPServerMetadata.RoleSearchSubtree
		}
		if r.ko.Spec.LDAPServerMetadata.ServiceAccountPassword != nil {
			f7.ServiceAccountPassword = r.ko.Spec.LDAPServerMetadata.ServiceAccountPassword
		}
		if r.ko.Spec.LDAPServerMetadata.ServiceAccountUsername != nil {
			f7.ServiceAccountUsername = r.ko.Spec.LDAPServerMetadata.ServiceAccountUsername
		}
		if r.ko.Spec.LDAPServerMetadata.UserBase != nil {
			f7.UserBase = r.ko.Spec.LDAPServerMetadata.UserBase
		}
		if r.ko.Spec.LDAPServerMetadata.UserRoleName != nil {
			f7.UserRoleName = r.ko.Spec.LDAPServerMetadata.UserRoleName
		}
		if r.ko.Spec.LDAPServerMetadata.UserSearchMatching != nil {
			f7.UserSearchMatching = r.ko.Spec.LDAPServerMetadata.UserSearchMatching
		}
		if r.ko.Spec.LDAPServerMetadata.UserSearchSubtree != nil {
			f7.UserSearchSubtree = r.ko.Spec.LDAPServerMetadata.UserSearchSubtree
		}
		res.LdapServerMetadata = f7
	}
	if r.ko.Spec.Logs != nil {
		f8 := &svcsdktypes.Logs{}
		if r.ko.Spec.Logs.Audit != nil {
			f8.Audit = r.ko.Spec.Logs.Audit
		}
		if r.ko.Spec.Logs.General != nil {
			f8.General = r.ko.Spec.Logs.General
		}
		res.Logs = f8
	}
	if r.ko.Spec.MaintenanceWindowStartTime != nil {
		f9 := &svcsdktypes.WeeklyStartTime{}
		if r.ko.Spec.MaintenanceWindowStartTime.DayOfWeek != nil {
			f9.DayOfWeek = svcsdktypes.DayOfWeek(*r.ko.Spec.MaintenanceWindowStartTime.DayOfWeek)
		}
		if r.ko.Spec.MaintenanceWindowStartTime.TimeOfDay != nil {
			f9.TimeOfDay = r.ko.Spec.MaintenanceWindowStartTime.TimeOfDay
		}
		if r.ko.Spec.MaintenanceWindowStartTime.TimeZone != nil {
			f9.TimeZone = r.ko.Spec.MaintenanceWindowStartTime.TimeZone
		}
		res.MaintenanceWindowStartTime = f9
	}
	if r.ko.Spec.SecurityGroups != nil {
		res.SecurityGroups = aws.ToStringSlice(r.ko.Spec.SecurityGroups)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if brokerDeleteInProgress(r) {
		return r, requeueWaitWhileDeleting
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteBrokerOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteBroker(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteBroker", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteBrokerInput, error) {
	res := &svcsdk.DeleteBrokerInput{}

	if r.ko.Status.BrokerID != nil {
		res.BrokerId = r.ko.Status.BrokerID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Broker,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
