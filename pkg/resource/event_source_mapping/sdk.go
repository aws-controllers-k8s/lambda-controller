// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package event_source_mapping

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/lambda"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/lambda-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.EventSourceMapping{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetEventSourceMappingOutput
	resp, err = rm.sdkapi.GetEventSourceMapping(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetEventSourceMapping", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AmazonManagedKafkaEventSourceConfig != nil {
		f0 := &svcapitypes.AmazonManagedKafkaEventSourceConfig{}
		if resp.AmazonManagedKafkaEventSourceConfig.ConsumerGroupId != nil {
			f0.ConsumerGroupID = resp.AmazonManagedKafkaEventSourceConfig.ConsumerGroupId
		}
		ko.Spec.AmazonManagedKafkaEventSourceConfig = f0
	} else {
		ko.Spec.AmazonManagedKafkaEventSourceConfig = nil
	}
	if resp.BatchSize != nil {
		batchSizeCopy := int64(*resp.BatchSize)
		ko.Spec.BatchSize = &batchSizeCopy
	} else {
		ko.Spec.BatchSize = nil
	}
	if resp.BisectBatchOnFunctionError != nil {
		ko.Spec.BisectBatchOnFunctionError = resp.BisectBatchOnFunctionError
	} else {
		ko.Spec.BisectBatchOnFunctionError = nil
	}
	if resp.DestinationConfig != nil {
		f3 := &svcapitypes.DestinationConfig{}
		if resp.DestinationConfig.OnFailure != nil {
			f3f0 := &svcapitypes.OnFailure{}
			if resp.DestinationConfig.OnFailure.Destination != nil {
				f3f0.Destination = resp.DestinationConfig.OnFailure.Destination
			}
			f3.OnFailure = f3f0
		}
		if resp.DestinationConfig.OnSuccess != nil {
			f3f1 := &svcapitypes.OnSuccess{}
			if resp.DestinationConfig.OnSuccess.Destination != nil {
				f3f1.Destination = resp.DestinationConfig.OnSuccess.Destination
			}
			f3.OnSuccess = f3f1
		}
		ko.Spec.DestinationConfig = f3
	} else {
		ko.Spec.DestinationConfig = nil
	}
	if resp.EventSourceArn != nil {
		ko.Spec.EventSourceARN = resp.EventSourceArn
	} else {
		ko.Spec.EventSourceARN = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EventSourceMappingArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EventSourceMappingArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.FilterCriteria != nil {
		f7 := &svcapitypes.FilterCriteria{}
		if resp.FilterCriteria.Filters != nil {
			f7f0 := []*svcapitypes.Filter{}
			for _, f7f0iter := range resp.FilterCriteria.Filters {
				f7f0elem := &svcapitypes.Filter{}
				if f7f0iter.Pattern != nil {
					f7f0elem.Pattern = f7f0iter.Pattern
				}
				f7f0 = append(f7f0, f7f0elem)
			}
			f7.Filters = f7f0
		}
		ko.Spec.FilterCriteria = f7
	} else {
		ko.Spec.FilterCriteria = nil
	}
	if resp.FunctionArn != nil {
		ko.Status.FunctionARN = resp.FunctionArn
	} else {
		ko.Status.FunctionARN = nil
	}
	if resp.FunctionResponseTypes != nil {
		f10 := []*string{}
		for _, f10iter := range resp.FunctionResponseTypes {
			var f10elem *string
			f10elem = aws.String(string(f10iter))
			f10 = append(f10, f10elem)
		}
		ko.Spec.FunctionResponseTypes = f10
	} else {
		ko.Spec.FunctionResponseTypes = nil
	}
	if resp.LastModified != nil {
		ko.Status.LastModified = &metav1.Time{*resp.LastModified}
	} else {
		ko.Status.LastModified = nil
	}
	if resp.LastProcessingResult != nil {
		ko.Status.LastProcessingResult = resp.LastProcessingResult
	} else {
		ko.Status.LastProcessingResult = nil
	}
	if resp.MaximumBatchingWindowInSeconds != nil {
		maximumBatchingWindowInSecondsCopy := int64(*resp.MaximumBatchingWindowInSeconds)
		ko.Spec.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
	} else {
		ko.Spec.MaximumBatchingWindowInSeconds = nil
	}
	if resp.MaximumRecordAgeInSeconds != nil {
		maximumRecordAgeInSecondsCopy := int64(*resp.MaximumRecordAgeInSeconds)
		ko.Spec.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
	} else {
		ko.Spec.MaximumRecordAgeInSeconds = nil
	}
	if resp.MaximumRetryAttempts != nil {
		maximumRetryAttemptsCopy := int64(*resp.MaximumRetryAttempts)
		ko.Spec.MaximumRetryAttempts = &maximumRetryAttemptsCopy
	} else {
		ko.Spec.MaximumRetryAttempts = nil
	}
	if resp.ParallelizationFactor != nil {
		parallelizationFactorCopy := int64(*resp.ParallelizationFactor)
		ko.Spec.ParallelizationFactor = &parallelizationFactorCopy
	} else {
		ko.Spec.ParallelizationFactor = nil
	}
	if resp.Queues != nil {
		ko.Spec.Queues = aws.StringSlice(resp.Queues)
	} else {
		ko.Spec.Queues = nil
	}
	if resp.ScalingConfig != nil {
		f21 := &svcapitypes.ScalingConfig{}
		if resp.ScalingConfig.MaximumConcurrency != nil {
			maximumConcurrencyCopy := int64(*resp.ScalingConfig.MaximumConcurrency)
			f21.MaximumConcurrency = &maximumConcurrencyCopy
		}
		ko.Spec.ScalingConfig = f21
	} else {
		ko.Spec.ScalingConfig = nil
	}
	if resp.SelfManagedEventSource != nil {
		f22 := &svcapitypes.SelfManagedEventSource{}
		if resp.SelfManagedEventSource.Endpoints != nil {
			f22f0 := map[string][]*string{}
			for f22f0key, f22f0valiter := range resp.SelfManagedEventSource.Endpoints {
				f22f0[f22f0key] = aws.StringSlice(f22f0valiter)
			}
			f22.Endpoints = f22f0
		}
		ko.Spec.SelfManagedEventSource = f22
	} else {
		ko.Spec.SelfManagedEventSource = nil
	}
	if resp.SelfManagedKafkaEventSourceConfig != nil {
		f23 := &svcapitypes.SelfManagedKafkaEventSourceConfig{}
		if resp.SelfManagedKafkaEventSourceConfig.ConsumerGroupId != nil {
			f23.ConsumerGroupID = resp.SelfManagedKafkaEventSourceConfig.ConsumerGroupId
		}
		ko.Spec.SelfManagedKafkaEventSourceConfig = f23
	} else {
		ko.Spec.SelfManagedKafkaEventSourceConfig = nil
	}
	if resp.SourceAccessConfigurations != nil {
		f24 := []*svcapitypes.SourceAccessConfiguration{}
		for _, f24iter := range resp.SourceAccessConfigurations {
			f24elem := &svcapitypes.SourceAccessConfiguration{}
			if f24iter.Type != "" {
				f24elem.Type = aws.String(string(f24iter.Type))
			}
			if f24iter.URI != nil {
				f24elem.URI = f24iter.URI
			}
			f24 = append(f24, f24elem)
		}
		ko.Spec.SourceAccessConfigurations = f24
	} else {
		ko.Spec.SourceAccessConfigurations = nil
	}
	if resp.StartingPosition != "" {
		ko.Spec.StartingPosition = aws.String(string(resp.StartingPosition))
	} else {
		ko.Spec.StartingPosition = nil
	}
	if resp.StartingPositionTimestamp != nil {
		ko.Spec.StartingPositionTimestamp = &metav1.Time{*resp.StartingPositionTimestamp}
	} else {
		ko.Spec.StartingPositionTimestamp = nil
	}
	if resp.State != nil {
		ko.Status.State = resp.State
	} else {
		ko.Status.State = nil
	}
	if resp.StateTransitionReason != nil {
		ko.Status.StateTransitionReason = resp.StateTransitionReason
	} else {
		ko.Status.StateTransitionReason = nil
	}
	if resp.Topics != nil {
		ko.Spec.Topics = aws.StringSlice(resp.Topics)
	} else {
		ko.Spec.Topics = nil
	}
	if resp.TumblingWindowInSeconds != nil {
		tumblingWindowInSecondsCopy := int64(*resp.TumblingWindowInSeconds)
		ko.Spec.TumblingWindowInSeconds = &tumblingWindowInSecondsCopy
	} else {
		ko.Spec.TumblingWindowInSeconds = nil
	}
	if resp.UUID != nil {
		ko.Status.UUID = resp.UUID
	} else {
		ko.Status.UUID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.UUID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetEventSourceMappingInput, error) {
	res := &svcsdk.GetEventSourceMappingInput{}

	if r.ko.Status.UUID != nil {
		res.UUID = r.ko.Status.UUID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateEventSourceMappingOutput
	_ = resp
	resp, err = rm.sdkapi.CreateEventSourceMapping(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateEventSourceMapping", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.AmazonManagedKafkaEventSourceConfig != nil {
		f0 := &svcapitypes.AmazonManagedKafkaEventSourceConfig{}
		if resp.AmazonManagedKafkaEventSourceConfig.ConsumerGroupId != nil {
			f0.ConsumerGroupID = resp.AmazonManagedKafkaEventSourceConfig.ConsumerGroupId
		}
		ko.Spec.AmazonManagedKafkaEventSourceConfig = f0
	} else {
		ko.Spec.AmazonManagedKafkaEventSourceConfig = nil
	}
	if resp.BatchSize != nil {
		batchSizeCopy := int64(*resp.BatchSize)
		ko.Spec.BatchSize = &batchSizeCopy
	} else {
		ko.Spec.BatchSize = nil
	}
	if resp.BisectBatchOnFunctionError != nil {
		ko.Spec.BisectBatchOnFunctionError = resp.BisectBatchOnFunctionError
	} else {
		ko.Spec.BisectBatchOnFunctionError = nil
	}
	if resp.DestinationConfig != nil {
		f3 := &svcapitypes.DestinationConfig{}
		if resp.DestinationConfig.OnFailure != nil {
			f3f0 := &svcapitypes.OnFailure{}
			if resp.DestinationConfig.OnFailure.Destination != nil {
				f3f0.Destination = resp.DestinationConfig.OnFailure.Destination
			}
			f3.OnFailure = f3f0
		}
		if resp.DestinationConfig.OnSuccess != nil {
			f3f1 := &svcapitypes.OnSuccess{}
			if resp.DestinationConfig.OnSuccess.Destination != nil {
				f3f1.Destination = resp.DestinationConfig.OnSuccess.Destination
			}
			f3.OnSuccess = f3f1
		}
		ko.Spec.DestinationConfig = f3
	} else {
		ko.Spec.DestinationConfig = nil
	}
	if resp.EventSourceArn != nil {
		ko.Spec.EventSourceARN = resp.EventSourceArn
	} else {
		ko.Spec.EventSourceARN = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EventSourceMappingArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EventSourceMappingArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.FilterCriteria != nil {
		f6 := &svcapitypes.FilterCriteria{}
		if resp.FilterCriteria.Filters != nil {
			f6f0 := []*svcapitypes.Filter{}
			for _, f6f0iter := range resp.FilterCriteria.Filters {
				f6f0elem := &svcapitypes.Filter{}
				if f6f0iter.Pattern != nil {
					f6f0elem.Pattern = f6f0iter.Pattern
				}
				f6f0 = append(f6f0, f6f0elem)
			}
			f6.Filters = f6f0
		}
		ko.Spec.FilterCriteria = f6
	} else {
		ko.Spec.FilterCriteria = nil
	}
	if resp.FunctionArn != nil {
		ko.Status.FunctionARN = resp.FunctionArn
	} else {
		ko.Status.FunctionARN = nil
	}
	if resp.FunctionResponseTypes != nil {
		f8 := []*string{}
		for _, f8iter := range resp.FunctionResponseTypes {
			var f8elem *string
			f8elem = aws.String(string(f8iter))
			f8 = append(f8, f8elem)
		}
		ko.Spec.FunctionResponseTypes = f8
	} else {
		ko.Spec.FunctionResponseTypes = nil
	}
	if resp.LastModified != nil {
		ko.Status.LastModified = &metav1.Time{*resp.LastModified}
	} else {
		ko.Status.LastModified = nil
	}
	if resp.LastProcessingResult != nil {
		ko.Status.LastProcessingResult = resp.LastProcessingResult
	} else {
		ko.Status.LastProcessingResult = nil
	}
	if resp.MaximumBatchingWindowInSeconds != nil {
		maximumBatchingWindowInSecondsCopy := int64(*resp.MaximumBatchingWindowInSeconds)
		ko.Spec.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
	} else {
		ko.Spec.MaximumBatchingWindowInSeconds = nil
	}
	if resp.MaximumRecordAgeInSeconds != nil {
		maximumRecordAgeInSecondsCopy := int64(*resp.MaximumRecordAgeInSeconds)
		ko.Spec.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
	} else {
		ko.Spec.MaximumRecordAgeInSeconds = nil
	}
	if resp.MaximumRetryAttempts != nil {
		maximumRetryAttemptsCopy := int64(*resp.MaximumRetryAttempts)
		ko.Spec.MaximumRetryAttempts = &maximumRetryAttemptsCopy
	} else {
		ko.Spec.MaximumRetryAttempts = nil
	}
	if resp.ParallelizationFactor != nil {
		parallelizationFactorCopy := int64(*resp.ParallelizationFactor)
		ko.Spec.ParallelizationFactor = &parallelizationFactorCopy
	} else {
		ko.Spec.ParallelizationFactor = nil
	}
	if resp.Queues != nil {
		ko.Spec.Queues = aws.StringSlice(resp.Queues)
	} else {
		ko.Spec.Queues = nil
	}
	if resp.ScalingConfig != nil {
		f16 := &svcapitypes.ScalingConfig{}
		if resp.ScalingConfig.MaximumConcurrency != nil {
			maximumConcurrencyCopy := int64(*resp.ScalingConfig.MaximumConcurrency)
			f16.MaximumConcurrency = &maximumConcurrencyCopy
		}
		ko.Spec.ScalingConfig = f16
	} else {
		ko.Spec.ScalingConfig = nil
	}
	if resp.SelfManagedEventSource != nil {
		f17 := &svcapitypes.SelfManagedEventSource{}
		if resp.SelfManagedEventSource.Endpoints != nil {
			f17f0 := map[string][]*string{}
			for f17f0key, f17f0valiter := range resp.SelfManagedEventSource.Endpoints {
				f17f0[f17f0key] = aws.StringSlice(f17f0valiter)
			}
			f17.Endpoints = f17f0
		}
		ko.Spec.SelfManagedEventSource = f17
	} else {
		ko.Spec.SelfManagedEventSource = nil
	}
	if resp.SelfManagedKafkaEventSourceConfig != nil {
		f18 := &svcapitypes.SelfManagedKafkaEventSourceConfig{}
		if resp.SelfManagedKafkaEventSourceConfig.ConsumerGroupId != nil {
			f18.ConsumerGroupID = resp.SelfManagedKafkaEventSourceConfig.ConsumerGroupId
		}
		ko.Spec.SelfManagedKafkaEventSourceConfig = f18
	} else {
		ko.Spec.SelfManagedKafkaEventSourceConfig = nil
	}
	if resp.SourceAccessConfigurations != nil {
		f19 := []*svcapitypes.SourceAccessConfiguration{}
		for _, f19iter := range resp.SourceAccessConfigurations {
			f19elem := &svcapitypes.SourceAccessConfiguration{}
			if f19iter.Type != "" {
				f19elem.Type = aws.String(string(f19iter.Type))
			}
			if f19iter.URI != nil {
				f19elem.URI = f19iter.URI
			}
			f19 = append(f19, f19elem)
		}
		ko.Spec.SourceAccessConfigurations = f19
	} else {
		ko.Spec.SourceAccessConfigurations = nil
	}
	if resp.StartingPosition != "" {
		ko.Spec.StartingPosition = aws.String(string(resp.StartingPosition))
	} else {
		ko.Spec.StartingPosition = nil
	}
	if resp.StartingPositionTimestamp != nil {
		ko.Spec.StartingPositionTimestamp = &metav1.Time{*resp.StartingPositionTimestamp}
	} else {
		ko.Spec.StartingPositionTimestamp = nil
	}
	if resp.State != nil {
		ko.Status.State = resp.State
	} else {
		ko.Status.State = nil
	}
	if resp.StateTransitionReason != nil {
		ko.Status.StateTransitionReason = resp.StateTransitionReason
	} else {
		ko.Status.StateTransitionReason = nil
	}
	if resp.Topics != nil {
		ko.Spec.Topics = aws.StringSlice(resp.Topics)
	} else {
		ko.Spec.Topics = nil
	}
	if resp.TumblingWindowInSeconds != nil {
		tumblingWindowInSecondsCopy := int64(*resp.TumblingWindowInSeconds)
		ko.Spec.TumblingWindowInSeconds = &tumblingWindowInSecondsCopy
	} else {
		ko.Spec.TumblingWindowInSeconds = nil
	}
	if resp.UUID != nil {
		ko.Status.UUID = resp.UUID
	} else {
		ko.Status.UUID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateEventSourceMappingInput, error) {
	res := &svcsdk.CreateEventSourceMappingInput{}

	if r.ko.Spec.AmazonManagedKafkaEventSourceConfig != nil {
		f0 := &svcsdktypes.AmazonManagedKafkaEventSourceConfig{}
		if r.ko.Spec.AmazonManagedKafkaEventSourceConfig.ConsumerGroupID != nil {
			f0.ConsumerGroupId = r.ko.Spec.AmazonManagedKafkaEventSourceConfig.ConsumerGroupID
		}
		res.AmazonManagedKafkaEventSourceConfig = f0
	}
	if r.ko.Spec.BatchSize != nil {
		batchSizeCopy0 := *r.ko.Spec.BatchSize
		if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field BatchSize is of type int32")
		}
		batchSizeCopy := int32(batchSizeCopy0)
		res.BatchSize = &batchSizeCopy
	}
	if r.ko.Spec.BisectBatchOnFunctionError != nil {
		res.BisectBatchOnFunctionError = r.ko.Spec.BisectBatchOnFunctionError
	}
	if r.ko.Spec.DestinationConfig != nil {
		f3 := &svcsdktypes.DestinationConfig{}
		if r.ko.Spec.DestinationConfig.OnFailure != nil {
			f3f0 := &svcsdktypes.OnFailure{}
			if r.ko.Spec.DestinationConfig.OnFailure.Destination != nil {
				f3f0.Destination = r.ko.Spec.DestinationConfig.OnFailure.Destination
			}
			f3.OnFailure = f3f0
		}
		if r.ko.Spec.DestinationConfig.OnSuccess != nil {
			f3f1 := &svcsdktypes.OnSuccess{}
			if r.ko.Spec.DestinationConfig.OnSuccess.Destination != nil {
				f3f1.Destination = r.ko.Spec.DestinationConfig.OnSuccess.Destination
			}
			f3.OnSuccess = f3f1
		}
		res.DestinationConfig = f3
	}
	if r.ko.Spec.Enabled != nil {
		res.Enabled = r.ko.Spec.Enabled
	}
	if r.ko.Spec.EventSourceARN != nil {
		res.EventSourceArn = r.ko.Spec.EventSourceARN
	}
	if r.ko.Spec.FilterCriteria != nil {
		f6 := &svcsdktypes.FilterCriteria{}
		if r.ko.Spec.FilterCriteria.Filters != nil {
			f6f0 := []svcsdktypes.Filter{}
			for _, f6f0iter := range r.ko.Spec.FilterCriteria.Filters {
				f6f0elem := &svcsdktypes.Filter{}
				if f6f0iter.Pattern != nil {
					f6f0elem.Pattern = f6f0iter.Pattern
				}
				f6f0 = append(f6f0, *f6f0elem)
			}
			f6.Filters = f6f0
		}
		res.FilterCriteria = f6
	}
	if r.ko.Spec.FunctionName != nil {
		res.FunctionName = r.ko.Spec.FunctionName
	}
	if r.ko.Spec.FunctionResponseTypes != nil {
		f8 := []svcsdktypes.FunctionResponseType{}
		for _, f8iter := range r.ko.Spec.FunctionResponseTypes {
			var f8elem string
			f8elem = string(*f8iter)
			f8 = append(f8, svcsdktypes.FunctionResponseType(f8elem))
		}
		res.FunctionResponseTypes = f8
	}
	if r.ko.Spec.MaximumBatchingWindowInSeconds != nil {
		maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.MaximumBatchingWindowInSeconds
		if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
		}
		maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
		res.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
	}
	if r.ko.Spec.MaximumRecordAgeInSeconds != nil {
		maximumRecordAgeInSecondsCopy0 := *r.ko.Spec.MaximumRecordAgeInSeconds
		if maximumRecordAgeInSecondsCopy0 > math.MaxInt32 || maximumRecordAgeInSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field MaximumRecordAgeInSeconds is of type int32")
		}
		maximumRecordAgeInSecondsCopy := int32(maximumRecordAgeInSecondsCopy0)
		res.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
	}
	if r.ko.Spec.MaximumRetryAttempts != nil {
		maximumRetryAttemptsCopy0 := *r.ko.Spec.MaximumRetryAttempts
		if maximumRetryAttemptsCopy0 > math.MaxInt32 || maximumRetryAttemptsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field MaximumRetryAttempts is of type int32")
		}
		maximumRetryAttemptsCopy := int32(maximumRetryAttemptsCopy0)
		res.MaximumRetryAttempts = &maximumRetryAttemptsCopy
	}
	if r.ko.Spec.ParallelizationFactor != nil {
		parallelizationFactorCopy0 := *r.ko.Spec.ParallelizationFactor
		if parallelizationFactorCopy0 > math.MaxInt32 || parallelizationFactorCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field ParallelizationFactor is of type int32")
		}
		parallelizationFactorCopy := int32(parallelizationFactorCopy0)
		res.ParallelizationFactor = &parallelizationFactorCopy
	}
	if r.ko.Spec.Queues != nil {
		res.Queues = aws.ToStringSlice(r.ko.Spec.Queues)
	}
	if r.ko.Spec.ScalingConfig != nil {
		f14 := &svcsdktypes.ScalingConfig{}
		if r.ko.Spec.ScalingConfig.MaximumConcurrency != nil {
			maximumConcurrencyCopy0 := *r.ko.Spec.ScalingConfig.MaximumConcurrency
			if maximumConcurrencyCopy0 > math.MaxInt32 || maximumConcurrencyCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field MaximumConcurrency is of type int32")
			}
			maximumConcurrencyCopy := int32(maximumConcurrencyCopy0)
			f14.MaximumConcurrency = &maximumConcurrencyCopy
		}
		res.ScalingConfig = f14
	}
	if r.ko.Spec.SelfManagedEventSource != nil {
		f15 := &svcsdktypes.SelfManagedEventSource{}
		if r.ko.Spec.SelfManagedEventSource.Endpoints != nil {
			f15f0 := map[string][]string{}
			for f15f0key, f15f0valiter := range r.ko.Spec.SelfManagedEventSource.Endpoints {
				f15f0[f15f0key] = aws.ToStringSlice(f15f0valiter)
			}
			f15.Endpoints = f15f0
		}
		res.SelfManagedEventSource = f15
	}
	if r.ko.Spec.SelfManagedKafkaEventSourceConfig != nil {
		f16 := &svcsdktypes.SelfManagedKafkaEventSourceConfig{}
		if r.ko.Spec.SelfManagedKafkaEventSourceConfig.ConsumerGroupID != nil {
			f16.ConsumerGroupId = r.ko.Spec.SelfManagedKafkaEventSourceConfig.ConsumerGroupID
		}
		res.SelfManagedKafkaEventSourceConfig = f16
	}
	if r.ko.Spec.SourceAccessConfigurations != nil {
		f17 := []svcsdktypes.SourceAccessConfiguration{}
		for _, f17iter := range r.ko.Spec.SourceAccessConfigurations {
			f17elem := &svcsdktypes.SourceAccessConfiguration{}
			if f17iter.Type != nil {
				f17elem.Type = svcsdktypes.SourceAccessType(*f17iter.Type)
			}
			if f17iter.URI != nil {
				f17elem.URI = f17iter.URI
			}
			f17 = append(f17, *f17elem)
		}
		res.SourceAccessConfigurations = f17
	}
	if r.ko.Spec.StartingPosition != nil {
		res.StartingPosition = svcsdktypes.EventSourcePosition(*r.ko.Spec.StartingPosition)
	}
	if r.ko.Spec.StartingPositionTimestamp != nil {
		res.StartingPositionTimestamp = &r.ko.Spec.StartingPositionTimestamp.Time
	}
	if r.ko.Spec.Topics != nil {
		res.Topics = aws.ToStringSlice(r.ko.Spec.Topics)
	}
	if r.ko.Spec.TumblingWindowInSeconds != nil {
		tumblingWindowInSecondsCopy0 := *r.ko.Spec.TumblingWindowInSeconds
		if tumblingWindowInSecondsCopy0 > math.MaxInt32 || tumblingWindowInSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field TumblingWindowInSeconds is of type int32")
		}
		tumblingWindowInSecondsCopy := int32(tumblingWindowInSecondsCopy0)
		res.TumblingWindowInSeconds = &tumblingWindowInSecondsCopy
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	// We need to carefully craft the update request if a user
	// wants to delete their filterCriterias. Mainly because the
	// aws-sdk-go doesn't try to update nil fields.
	if filterCriteriasDeleted(latest, desired, delta) {
		input.FilterCriteria = &svcsdktypes.FilterCriteria{
			Filters: []svcsdktypes.Filter{},
		}
	}

	var resp *svcsdk.UpdateEventSourceMappingOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateEventSourceMapping(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateEventSourceMapping", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.AmazonManagedKafkaEventSourceConfig != nil {
		f0 := &svcapitypes.AmazonManagedKafkaEventSourceConfig{}
		if resp.AmazonManagedKafkaEventSourceConfig.ConsumerGroupId != nil {
			f0.ConsumerGroupID = resp.AmazonManagedKafkaEventSourceConfig.ConsumerGroupId
		}
		ko.Spec.AmazonManagedKafkaEventSourceConfig = f0
	} else {
		ko.Spec.AmazonManagedKafkaEventSourceConfig = nil
	}
	if resp.BatchSize != nil {
		batchSizeCopy := int64(*resp.BatchSize)
		ko.Spec.BatchSize = &batchSizeCopy
	} else {
		ko.Spec.BatchSize = nil
	}
	if resp.BisectBatchOnFunctionError != nil {
		ko.Spec.BisectBatchOnFunctionError = resp.BisectBatchOnFunctionError
	} else {
		ko.Spec.BisectBatchOnFunctionError = nil
	}
	if resp.DestinationConfig != nil {
		f3 := &svcapitypes.DestinationConfig{}
		if resp.DestinationConfig.OnFailure != nil {
			f3f0 := &svcapitypes.OnFailure{}
			if resp.DestinationConfig.OnFailure.Destination != nil {
				f3f0.Destination = resp.DestinationConfig.OnFailure.Destination
			}
			f3.OnFailure = f3f0
		}
		if resp.DestinationConfig.OnSuccess != nil {
			f3f1 := &svcapitypes.OnSuccess{}
			if resp.DestinationConfig.OnSuccess.Destination != nil {
				f3f1.Destination = resp.DestinationConfig.OnSuccess.Destination
			}
			f3.OnSuccess = f3f1
		}
		ko.Spec.DestinationConfig = f3
	} else {
		ko.Spec.DestinationConfig = nil
	}
	if resp.EventSourceArn != nil {
		ko.Spec.EventSourceARN = resp.EventSourceArn
	} else {
		ko.Spec.EventSourceARN = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EventSourceMappingArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EventSourceMappingArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.FilterCriteria != nil {
		f7 := &svcapitypes.FilterCriteria{}
		if resp.FilterCriteria.Filters != nil {
			f7f0 := []*svcapitypes.Filter{}
			for _, f7f0iter := range resp.FilterCriteria.Filters {
				f7f0elem := &svcapitypes.Filter{}
				if f7f0iter.Pattern != nil {
					f7f0elem.Pattern = f7f0iter.Pattern
				}
				f7f0 = append(f7f0, f7f0elem)
			}
			f7.Filters = f7f0
		}
		ko.Spec.FilterCriteria = f7
	} else {
		ko.Spec.FilterCriteria = nil
	}
	if resp.FunctionArn != nil {
		ko.Status.FunctionARN = resp.FunctionArn
	} else {
		ko.Status.FunctionARN = nil
	}
	if resp.FunctionResponseTypes != nil {
		f10 := []*string{}
		for _, f10iter := range resp.FunctionResponseTypes {
			var f10elem *string
			f10elem = aws.String(string(f10iter))
			f10 = append(f10, f10elem)
		}
		ko.Spec.FunctionResponseTypes = f10
	} else {
		ko.Spec.FunctionResponseTypes = nil
	}
	if resp.LastModified != nil {
		ko.Status.LastModified = &metav1.Time{*resp.LastModified}
	} else {
		ko.Status.LastModified = nil
	}
	if resp.LastProcessingResult != nil {
		ko.Status.LastProcessingResult = resp.LastProcessingResult
	} else {
		ko.Status.LastProcessingResult = nil
	}
	if resp.MaximumBatchingWindowInSeconds != nil {
		maximumBatchingWindowInSecondsCopy := int64(*resp.MaximumBatchingWindowInSeconds)
		ko.Spec.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
	} else {
		ko.Spec.MaximumBatchingWindowInSeconds = nil
	}
	if resp.MaximumRecordAgeInSeconds != nil {
		maximumRecordAgeInSecondsCopy := int64(*resp.MaximumRecordAgeInSeconds)
		ko.Spec.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
	} else {
		ko.Spec.MaximumRecordAgeInSeconds = nil
	}
	if resp.MaximumRetryAttempts != nil {
		maximumRetryAttemptsCopy := int64(*resp.MaximumRetryAttempts)
		ko.Spec.MaximumRetryAttempts = &maximumRetryAttemptsCopy
	} else {
		ko.Spec.MaximumRetryAttempts = nil
	}
	if resp.ParallelizationFactor != nil {
		parallelizationFactorCopy := int64(*resp.ParallelizationFactor)
		ko.Spec.ParallelizationFactor = &parallelizationFactorCopy
	} else {
		ko.Spec.ParallelizationFactor = nil
	}
	if resp.Queues != nil {
		ko.Spec.Queues = aws.StringSlice(resp.Queues)
	} else {
		ko.Spec.Queues = nil
	}
	if resp.ScalingConfig != nil {
		f21 := &svcapitypes.ScalingConfig{}
		if resp.ScalingConfig.MaximumConcurrency != nil {
			maximumConcurrencyCopy := int64(*resp.ScalingConfig.MaximumConcurrency)
			f21.MaximumConcurrency = &maximumConcurrencyCopy
		}
		ko.Spec.ScalingConfig = f21
	} else {
		ko.Spec.ScalingConfig = nil
	}
	if resp.SelfManagedEventSource != nil {
		f22 := &svcapitypes.SelfManagedEventSource{}
		if resp.SelfManagedEventSource.Endpoints != nil {
			f22f0 := map[string][]*string{}
			for f22f0key, f22f0valiter := range resp.SelfManagedEventSource.Endpoints {
				f22f0[f22f0key] = aws.StringSlice(f22f0valiter)
			}
			f22.Endpoints = f22f0
		}
		ko.Spec.SelfManagedEventSource = f22
	} else {
		ko.Spec.SelfManagedEventSource = nil
	}
	if resp.SelfManagedKafkaEventSourceConfig != nil {
		f23 := &svcapitypes.SelfManagedKafkaEventSourceConfig{}
		if resp.SelfManagedKafkaEventSourceConfig.ConsumerGroupId != nil {
			f23.ConsumerGroupID = resp.SelfManagedKafkaEventSourceConfig.ConsumerGroupId
		}
		ko.Spec.SelfManagedKafkaEventSourceConfig = f23
	} else {
		ko.Spec.SelfManagedKafkaEventSourceConfig = nil
	}
	if resp.SourceAccessConfigurations != nil {
		f24 := []*svcapitypes.SourceAccessConfiguration{}
		for _, f24iter := range resp.SourceAccessConfigurations {
			f24elem := &svcapitypes.SourceAccessConfiguration{}
			if f24iter.Type != "" {
				f24elem.Type = aws.String(string(f24iter.Type))
			}
			if f24iter.URI != nil {
				f24elem.URI = f24iter.URI
			}
			f24 = append(f24, f24elem)
		}
		ko.Spec.SourceAccessConfigurations = f24
	} else {
		ko.Spec.SourceAccessConfigurations = nil
	}
	if resp.StartingPosition != "" {
		ko.Spec.StartingPosition = aws.String(string(resp.StartingPosition))
	} else {
		ko.Spec.StartingPosition = nil
	}
	if resp.StartingPositionTimestamp != nil {
		ko.Spec.StartingPositionTimestamp = &metav1.Time{*resp.StartingPositionTimestamp}
	} else {
		ko.Spec.StartingPositionTimestamp = nil
	}
	if resp.State != nil {
		ko.Status.State = resp.State
	} else {
		ko.Status.State = nil
	}
	if resp.StateTransitionReason != nil {
		ko.Status.StateTransitionReason = resp.StateTransitionReason
	} else {
		ko.Status.StateTransitionReason = nil
	}
	if resp.Topics != nil {
		ko.Spec.Topics = aws.StringSlice(resp.Topics)
	} else {
		ko.Spec.Topics = nil
	}
	if resp.TumblingWindowInSeconds != nil {
		tumblingWindowInSecondsCopy := int64(*resp.TumblingWindowInSeconds)
		ko.Spec.TumblingWindowInSeconds = &tumblingWindowInSecondsCopy
	} else {
		ko.Spec.TumblingWindowInSeconds = nil
	}
	if resp.UUID != nil {
		ko.Status.UUID = resp.UUID
	} else {
		ko.Status.UUID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateEventSourceMappingInput, error) {
	res := &svcsdk.UpdateEventSourceMappingInput{}

	if r.ko.Spec.BatchSize != nil {
		batchSizeCopy0 := *r.ko.Spec.BatchSize
		if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field BatchSize is of type int32")
		}
		batchSizeCopy := int32(batchSizeCopy0)
		res.BatchSize = &batchSizeCopy
	}
	if r.ko.Spec.BisectBatchOnFunctionError != nil {
		res.BisectBatchOnFunctionError = r.ko.Spec.BisectBatchOnFunctionError
	}
	if r.ko.Spec.DestinationConfig != nil {
		f2 := &svcsdktypes.DestinationConfig{}
		if r.ko.Spec.DestinationConfig.OnFailure != nil {
			f2f0 := &svcsdktypes.OnFailure{}
			if r.ko.Spec.DestinationConfig.OnFailure.Destination != nil {
				f2f0.Destination = r.ko.Spec.DestinationConfig.OnFailure.Destination
			}
			f2.OnFailure = f2f0
		}
		if r.ko.Spec.DestinationConfig.OnSuccess != nil {
			f2f1 := &svcsdktypes.OnSuccess{}
			if r.ko.Spec.DestinationConfig.OnSuccess.Destination != nil {
				f2f1.Destination = r.ko.Spec.DestinationConfig.OnSuccess.Destination
			}
			f2.OnSuccess = f2f1
		}
		res.DestinationConfig = f2
	}
	if r.ko.Spec.Enabled != nil {
		res.Enabled = r.ko.Spec.Enabled
	}
	if r.ko.Spec.FilterCriteria != nil {
		f5 := &svcsdktypes.FilterCriteria{}
		if r.ko.Spec.FilterCriteria.Filters != nil {
			f5f0 := []svcsdktypes.Filter{}
			for _, f5f0iter := range r.ko.Spec.FilterCriteria.Filters {
				f5f0elem := &svcsdktypes.Filter{}
				if f5f0iter.Pattern != nil {
					f5f0elem.Pattern = f5f0iter.Pattern
				}
				f5f0 = append(f5f0, *f5f0elem)
			}
			f5.Filters = f5f0
		}
		res.FilterCriteria = f5
	}
	if r.ko.Spec.FunctionName != nil {
		res.FunctionName = r.ko.Spec.FunctionName
	}
	if r.ko.Spec.FunctionResponseTypes != nil {
		f7 := []svcsdktypes.FunctionResponseType{}
		for _, f7iter := range r.ko.Spec.FunctionResponseTypes {
			var f7elem string
			f7elem = string(*f7iter)
			f7 = append(f7, svcsdktypes.FunctionResponseType(f7elem))
		}
		res.FunctionResponseTypes = f7
	}
	if r.ko.Spec.MaximumBatchingWindowInSeconds != nil {
		maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.MaximumBatchingWindowInSeconds
		if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
		}
		maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
		res.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
	}
	if r.ko.Spec.MaximumRecordAgeInSeconds != nil {
		maximumRecordAgeInSecondsCopy0 := *r.ko.Spec.MaximumRecordAgeInSeconds
		if maximumRecordAgeInSecondsCopy0 > math.MaxInt32 || maximumRecordAgeInSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field MaximumRecordAgeInSeconds is of type int32")
		}
		maximumRecordAgeInSecondsCopy := int32(maximumRecordAgeInSecondsCopy0)
		res.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
	}
	if r.ko.Spec.MaximumRetryAttempts != nil {
		maximumRetryAttemptsCopy0 := *r.ko.Spec.MaximumRetryAttempts
		if maximumRetryAttemptsCopy0 > math.MaxInt32 || maximumRetryAttemptsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field MaximumRetryAttempts is of type int32")
		}
		maximumRetryAttemptsCopy := int32(maximumRetryAttemptsCopy0)
		res.MaximumRetryAttempts = &maximumRetryAttemptsCopy
	}
	if r.ko.Spec.ParallelizationFactor != nil {
		parallelizationFactorCopy0 := *r.ko.Spec.ParallelizationFactor
		if parallelizationFactorCopy0 > math.MaxInt32 || parallelizationFactorCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field ParallelizationFactor is of type int32")
		}
		parallelizationFactorCopy := int32(parallelizationFactorCopy0)
		res.ParallelizationFactor = &parallelizationFactorCopy
	}
	if r.ko.Spec.ScalingConfig != nil {
		f15 := &svcsdktypes.ScalingConfig{}
		if r.ko.Spec.ScalingConfig.MaximumConcurrency != nil {
			maximumConcurrencyCopy0 := *r.ko.Spec.ScalingConfig.MaximumConcurrency
			if maximumConcurrencyCopy0 > math.MaxInt32 || maximumConcurrencyCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field MaximumConcurrency is of type int32")
			}
			maximumConcurrencyCopy := int32(maximumConcurrencyCopy0)
			f15.MaximumConcurrency = &maximumConcurrencyCopy
		}
		res.ScalingConfig = f15
	}
	if r.ko.Spec.SourceAccessConfigurations != nil {
		f16 := []svcsdktypes.SourceAccessConfiguration{}
		for _, f16iter := range r.ko.Spec.SourceAccessConfigurations {
			f16elem := &svcsdktypes.SourceAccessConfiguration{}
			if f16iter.Type != nil {
				f16elem.Type = svcsdktypes.SourceAccessType(*f16iter.Type)
			}
			if f16iter.URI != nil {
				f16elem.URI = f16iter.URI
			}
			f16 = append(f16, *f16elem)
		}
		res.SourceAccessConfigurations = f16
	}
	if r.ko.Spec.TumblingWindowInSeconds != nil {
		tumblingWindowInSecondsCopy0 := *r.ko.Spec.TumblingWindowInSeconds
		if tumblingWindowInSecondsCopy0 > math.MaxInt32 || tumblingWindowInSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field TumblingWindowInSeconds is of type int32")
		}
		tumblingWindowInSecondsCopy := int32(tumblingWindowInSecondsCopy0)
		res.TumblingWindowInSeconds = &tumblingWindowInSecondsCopy
	}
	if r.ko.Status.UUID != nil {
		res.UUID = r.ko.Status.UUID
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteEventSourceMappingOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteEventSourceMapping(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteEventSourceMapping", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteEventSourceMappingInput, error) {
	res := &svcsdk.DeleteEventSourceMappingInput{}

	if r.ko.Status.UUID != nil {
		res.UUID = r.ko.Status.UUID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.EventSourceMapping,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
